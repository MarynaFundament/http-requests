{"mappings":"mkBAAA,aACAA,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAyBC,EAAKC,EAAKH,GAC3BG,KAAOD,EACPN,OAAOC,eAAeK,EAAKC,EAAK,CAC5BH,MAAOA,EACPI,YAAY,EACZC,cAAc,EACdC,UAAU,IAGdJ,EAAIC,GAAOH,EAEf,OAAOE,C,cCfXN,OAAOC,eAAeU,EAAS,aAAc,CACzCP,OAAO,IAEXO,EAAQN,QAER,SAAuBO,GACnB,IAAI,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAI,CACrC,IAAIG,EAAyB,MAAhBF,UAAUD,GAAaC,UAAUD,GAAK,GAC/CI,EAAUjB,OAAOkB,KAAKF,GACkB,mBAAjChB,OAAOmB,wBACdF,EAAUA,EAAQG,OAAOpB,OAAOmB,sBAAsBH,GAAQK,QAAO,SAASC,GAC1E,OAAOtB,OAAOuB,yBAAyBP,EAAQM,GAAKd,U,MAG5DS,EAAQO,SAAQ,SAASjB,GACrBkB,EAAqBpB,QAAQO,EAAQL,EAAKS,EAAOT,G,IAGzD,OAAOK,C,EAdX,IAgBgCN,EAhB5BmB,GAgB4BnB,EAhBaoB,EAAA,WAiB3BpB,EAAIqB,WAAarB,EAAM,CACjCD,QAASC,GCvBjB,ICGMsB,EAAgBC,SAASC,cAAc,mBAEvCC,EAAmBF,SAASC,cAAc,oBAM1CE,EAAkC,SAAAC,GACpC,IAAMC,EAAO,IAAIC,KAAe,IAAVF,GACtB,MAAO,GAAsBb,OAAnBc,EAAKE,WAAW,KAAqBhB,OAAlBc,EAAKG,a,EA8BtCT,EAAcU,iBAAiB,UA3BC,SAACC,GAC/BA,EAAMC,iBAER,IDfsCC,ECehCC,EAAaH,EAAM3B,OAAO+B,SAASC,aAAaxC,MAAMyC,QDftBJ,ECmBfC,EDlBvBI,MAAM,GAAiB1B,OALN,kDAKC,OAA4CA,OAAvCqB,EAAS,gCAAsCrB,OAJtD,qCAKf2B,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,M,IAGjBC,OAAM,SAAAC,GACLC,QAAQC,KAAKF,E,KCUdP,MAAK,SAAAU,GASF,OAReC,EAAA/C,EAAA,IACR8C,EAAI,CACPE,IAAI,CACAC,QAAS5B,EAAiCyB,EAAKE,IAAIC,SACnDC,OAAQ7B,EAAiCyB,EAAKE,IAAIE,U,IAO7Dd,MAAK,SAAAU,G,OAUF,SAAsBK,GAClBP,QAAQQ,IAAID,GAEZ,IAAMrB,EAAWqB,EAAYE,KACvBC,EAAOH,EAAYI,KAAKD,KACxBE,EAAYL,EAAYI,KAAKE,WAC7BR,EAAUE,EAAYH,IAAIC,QAC1BC,EAASC,EAAYH,IAAIE,OACzBQ,EAASP,EAAYO,OAAOC,IAE5BC,EAAS,qEAIiCnD,OAHhBqB,EAAS,qKAMiCrB,OAHf6C,EAAK,sKAMhB7C,OAH6B+C,EAAU,wIAM3C/C,OAHDwC,EAAS,iIAMVxC,OAHGyC,EAAQ,+HAGdzC,OAAPiD,EAAO,+EAKvCtC,EAAiByC,UAAYD,C,CAzCvBE,CAAahB,E,IACCJ,OAArB,SAAAqB,GACH3C,EAAiByC,UAAY,2BAC7BjB,QAAQmB,MAAMA,E","sources":["node_modules/@swc/helpers/lib/_define_property.js","node_modules/@swc/helpers/lib/_object_spread.js","src/js/weather-api.js","src/js/openweather.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _objectSpread;\nvar _defineProperty = _interopRequireDefault(require(\"./_define_property\"));\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === 'function') {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            (0, _defineProperty).default(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';\nconst API_KEY = 'a1f446d78926e645ec409a2ea0b5f127';\n\n\nexport const fetchWeatherByCityName = cityName => \nfetch(`${BASE_URL}?q=${cityName}&lang=en&units=metric&appid=${API_KEY}`)\n.then(response => {\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n  return response.json();\n})\n// .then(json => console.log(json))\n.catch(err => {\n  console.warn(err);\n});\n","\n\n\nconst weatherFormEl = document.querySelector('.js-search-form')\n// console.log(weatherFormEl)\nconst weatherWrapperEl = document.querySelector('.weather_wrapper')\n// console.log(weatherWrapperEl)\n\nimport {fetchWeatherByCityName} from './weather-api'\n// console.log(fetchWeatherByCityName)\n\nconst convertSecondsToHoursAndMinutes = seconds => {\n    const date = new Date(seconds * 1000);\n    return `${date.getHours()}:${date.getMinutes()}`;\n}\n\nconst handleWeatherFormSubmit = (event) => {\n  event.preventDefault();\n\nconst searchCity = event.target.elements.user_country.value.trim()\n// console.log(searchCity)\n\n\nfetchWeatherByCityName(searchCity)\n.then(data => {\n    const newData ={\n        ...data, \n        sys:{\n            sunrise: convertSecondsToHoursAndMinutes (data.sys.sunrise),\n            sunset: convertSecondsToHoursAndMinutes (data.sys.sunset)\n             \n        }\n    }\n    return newData\n})\n// .then(data => console.log(data))\n.then(data => createMarkup(data)) // Викликайте createMarkup тут і передайте дані\n.catch(error => {\n    weatherWrapperEl.innerHTML = 'Seeked city doesnt exist';\n    console.error(error);\n});\n}\n\nweatherFormEl.addEventListener('submit', handleWeatherFormSubmit)\n\n\n    function createMarkup(weatherData) {\n        console.log(weatherData)\n    \n        const cityName = weatherData.name;\n        const temp = weatherData.main.temp;\n        const feelsLike = weatherData.main.feels_like;\n        const sunrise = weatherData.sys.sunrise;\n        const sunset = weatherData.sys.sunset;\n        const clouds = weatherData.clouds.all;\n        \n        const markup = `<div class=\"weather_card\">\n                <h2 class=\"city-name\">${cityName}</h2>\n                <ul class=\"weather-info list\">\n                    <li class=\"weather-info-item\">\n                        <p class=\"temp\"> Температура: ${temp} &#8451;</p>\n                    </li>\n                    <li class=\"weather-info-item\">\n                        <p class=\"feels-like-temp\"> Відчувається як: ${feelsLike} &#8451;</p>\n                    </li>\n                    <li class=\"weather-info-item\">\n                        <p>Схід сонця: ${(sunrise)}</p>\n                    </li>\n                    <li class=\"weather-info-item\">\n                        <p>Захід сонця: ${(sunset)}</p>\n                    </li>\n                    <li class=\"weather-info-item\">\n                        <p>Хмарність: ${clouds}%</p>\n                    </li>\n                </ul>\n            </div>`;\n    \n        weatherWrapperEl.innerHTML = markup;\n    }\n    \n\n"],"names":["Object","defineProperty","module","exports","value","default","obj","key","enumerable","configurable","writable","$9eddae5a012cde57$exports","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","$9eddae5a012cde57$var$_defineProperty","parcelRequire","__esModule","$33f9d396902a3881$var$weatherFormEl","document","querySelector","$33f9d396902a3881$var$weatherWrapperEl","$33f9d396902a3881$var$convertSecondsToHoursAndMinutes","seconds","date","Date","getHours","getMinutes","addEventListener","event","preventDefault","cityName","searchCity","elements","user_country","trim","fetch","then","response","ok","Error","status","json","catch","err","console","warn","data","$parcel$interopDefault","sys","sunrise","sunset","weatherData","log","name","temp","main","feelsLike","feels_like","clouds","all","markup","innerHTML","$33f9d396902a3881$var$createMarkup","error"],"version":3,"file":"openweather.1b511352.js.map"}